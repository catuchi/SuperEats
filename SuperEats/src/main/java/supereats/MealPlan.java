package supereats;

import java.time.LocalDate;
import java.util.ArrayList;

public class MealPlan {
    private int mealPlanId;
    private int userId;
    private String name;
    private ArrayList<MealPlanRecipe> mealPlanRecipes = new ArrayList<>();
    private LocalDate startDate;
    private LocalDate endDate;

    // Constructors
    public MealPlan(int userId, String name, LocalDate startDate, LocalDate endDate) {
        this.userId = userId;
        this.name = name;
        this.startDate = startDate;
        this.endDate = endDate;
    }

    // Getters and Setters
    public int getMealPlanId() {
        return mealPlanId;
    }

    public void setMealPlanId(int mealPlanId) {
        this.mealPlanId = mealPlanId;
    }

    public int getUserId() {
        return userId;
    }

    public void setUserId(int userId) {
        this.userId = userId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public ArrayList<MealPlanRecipe> getMealPlanRecipes() {
        if (mealPlanRecipes.isEmpty()) {
            mealPlanRecipes = loadMealPlanRecipesFromDB();
        }
        return mealPlanRecipes;
    }

    public void setMealPlanRecipes(ArrayList<MealPlanRecipe> mealPlanRecipes) {
        this.mealPlanRecipes = mealPlanRecipes;
    }

    public LocalDate getStartDate() {
        return startDate;
    }

    public void setStartDate(LocalDate startDate) {
        this.startDate = startDate;
    }

    public LocalDate getEndDate() {
        return endDate;
    }

    public void setEndDate(LocalDate endDate) {
        this.endDate = endDate;
    }

    // Methods to add/remove MealPlanRecipe entries
    public void addMealPlanRecipe(MealPlanRecipe mealPlanRecipe) {
        mealPlanRecipes.add(mealPlanRecipe);
        // Optionally, call DAO to save this association to the database
    }

    public void removeMealPlanRecipe(MealPlanRecipe mealPlanRecipe) {
        mealPlanRecipes.remove(mealPlanRecipe);
        // Optionally, call DAO to delete this association from the database
    }

    // Helper method to load mealPlanRecipes from the database
    private ArrayList<MealPlanRecipe> loadMealPlanRecipesFromDB() {
        // Implement DB logic to retrieve MealPlanRecipe objects by mealPlanId
        return new ArrayList<>(); // Placeholder
    }
    
    // Method to create meal plan in the database
    public void createMealPlan() {
        // Call a DAO to save this meal plan in the database
        // Optionally, update `mealPlanId` after saving if generated by the database
    }
    
    // Method to delete the meal plan and associated MealPlanRecipe entries
    public void deleteMealPlan() {
        // Optionally delete related MealPlanRecipe entries from the database
        deleteMealPlanRecipesFromDB();
        
        // Delete the MealPlan itself from the database
        deleteMealPlanFromDB();
    }
    
    private void deleteMealPlanFromDB() {
        // Implement DAO logic to delete this meal plan by mealPlanId
        // Example: mealPlanDAO.deleteMealPlan(mealPlanId);
    }

    private void deleteMealPlanRecipesFromDB() {
        // Implement DAO logic to delete all MealPlanRecipe records with this mealPlanId
        // Example: mealPlanRecipeDAO.deleteByMealPlanId(mealPlanId);
    }
    
    public void addRecipeToPlan(Recipe recipe) {
        MealPlanRecipe mealPlanRecipe = new MealPlanRecipe(this.mealPlanId, recipe.getRecipeId());
        mealPlanRecipes.add(mealPlanRecipe);
        // Optionally, call a DAO to save `mealPlanRecipe` to the database
    }
    
    public void removeRecipeFromPlan(Recipe recipe) {
        mealPlanRecipes.removeIf(mpr -> mpr.getRecipeId() == recipe.getRecipeId());
        // Optionally, call a DAO to delete this association from the database
    }

    public void generateGroceryList() {
        // Example logic to generate a grocery list based on recipes in the meal plan
        // HashMap<String, Double> groceryList = new HashMap<>(); // Map to store ingredient name and total quantity

        for (MealPlanRecipe mealPlanRecipe : mealPlanRecipes) {
            Recipe recipe = null; // TODO: Retrieve Recipe by recipeId from mealPlanRecipe
            for (RecipeIngredient recipeIngredient : recipe.getRecipeIngredients()) {
                // groceryList.merge(recipeIngredient.getName(), recipeIngredient.getQuantity(), Double::sum);
            }
        }
        
        // Print or save the generated grocery list
    }
}
